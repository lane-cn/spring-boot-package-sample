<project default="usage">

	<property name="artifact.id" value="spring-boot-package-sample" />
	<property name="artifact.version" value="1.0.0-SNAPSHOT" />
	<property name="start-class" value="com.mydomain.app.package_.Main" />
	<property name="ant-spring-boot.version" value="2.0.5.RELEASE" />

	<property name="dir.dependencies.ant" value="dependencies/ant" />
	<property name="dir.dependencies.lib" value="dependencies/lib" />
	<property name="dir.dependencies.test" value="dependencies/test" />
	<property name="dir.java" value="src/main/java" />
	<property name="dir.test.java" value="src/test/java" />
	<property name="dir.res" value="src/main/resources" />
	<property name="dir.test.res" value="src/test/resources" />
	<property name="dir.build" value="target" />
	<property name="dir.classes" value="${dir.build}/classes" />
	<property name="dir.docs" value="${dir.build}/apidocs" />
	<property name="dir.test.classes" value="${dir.build}/test-classes" />

	<path id="classpath">
		<fileset dir="${dir.dependencies.lib}">
			<include name="*.jar" />
			<exclude name="*-sources.jar" />
			<exclude name="*-javadoc.jar" />
		</fileset>
	</path>

	<path id="classpath-test">
		<fileset dir="${dir.dependencies.lib}">
			<include name="*.jar" />
			<exclude name="*-sources.jar" />
			<exclude name="*-javadoc.jar" />
		</fileset>
		<fileset dir="${dir.dependencies.test}">
			<include name="*.jar" />
			<exclude name="*-sources.jar" />
			<exclude name="*-javadoc.jar" />
		</fileset>
	</path>

	<target name="usage">
		<echo message="" />
		<echo message="${artifact.id} build file" />
		<echo message="-----------------------------------" />
		<echo message="" />
		<echo message="Available targets are:" />
		<echo message="" />
		<echo message="clean --> clean the project and remove all files generated by the previous build" />
		<echo message="init --> create the build directory if it doesn't exist" />
		<echo message="compile --> compile the source code" />
		<echo message="javadoc --> generate standard javadoc output" />
		<echo message="test --> run unit tests" />
		<echo message="package --> package compiled source code into the distributable format" />
		<echo message="" />
	</target>

	<target name="clean" description="clean the project and remove all files generated by the previous build">
		<delete dir="${dir.build}" quiet="true" failonerror="false" />
	</target>

	<target name="init" description="create the build directory if it doesn't exist">
		<mkdir dir="${dir.classes}" />
		<mkdir dir="${dir.test.classes}" />
	</target>

	<target name="compile" depends="init" description="compile the source code">
		<javac srcdir="${dir.java}" destdir="${dir.classes}" debug="true" source="1.8" target="1.8" includeAntRuntime="false">
			<compilerarg line="-encoding utf-8" />
			<classpath refid="classpath" />
		</javac>
		<copy todir="${dir.classes}">
			<fileset dir="${dir.res}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<target name="javadoc" depends="init" description="generate standard javadoc output">
		<javadoc sourcepath="${dir.java}" destdir="${dir.docs}" use="true" charset="UTF-8" encoding="UTF-8" docencoding="UTF-8">
			<classpath refid="classpath" />
		</javadoc>
	</target>

	<target name="test" depends="compile" description="run unit tests">
		<javac srcdir="${dir.test.java}" destdir="${dir.test.classes}" debug="true" source="1.8" target="1.8" includeAntRuntime="false">
			<compilerarg line="-encoding utf-8" />
			<classpath>
				<pathelement location="${dir.classes}" />
				<path refid="classpath-test" />
			</classpath>
		</javac>
		<copy todir="${dir.test.classes}">
			<fileset dir="${dir.test.res}">
				<include name="**/*" />
			</fileset>
		</copy>

		<junit printsummary="true">
			<sysproperty key="file.encoding" value="UTF-8" />
			<classpath>
				<pathelement location="${dir.classes}" />
				<pathelement location="${dir.test.classes}" />
				<path refid="classpath-test" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<batchtest fork="yes" todir="${dir.build}">
				<fileset dir="${dir.test.java}">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="package" depends="compile" description="package compiled source code into the distributable format">
		<jar destfile="target/${artifact.id}-${artifact.version}.jar" compress="false">
			<mappedresources>
				<fileset dir="target/classes" />
				<globmapper from="*" to="BOOT-INF/classes/*" />
			</mappedresources>
			<mappedresources>
				<fileset dir="src/main/resources" erroronmissingdir="false" />
				<globmapper from="*" to="BOOT-INF/classes/*" />
			</mappedresources>
			<mappedresources>
				<fileset dir="${dir.dependencies.lib}" />
				<globmapper from="*" to="BOOT-INF/lib/*" />
			</mappedresources>
			<zipfileset src="${dir.dependencies.ant}/spring-boot-loader-jar-${ant-spring-boot.version}.jar" />
			<manifest>
				<attribute name="Main-Class" value="org.springframework.boot.loader.JarLauncher" />
				<attribute name="Start-Class" value="${start-class}" />
			</manifest>
		</jar>
	</target>

</project>